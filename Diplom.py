from math import ceil, floor
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.statespace.sarimax import SARIMAX
import datetime
import streamlit as st
import collections.abc
from pandas.tseries.offsets import DateOffset
import calmap

uploadFile = '2017-2022(month).csv'

def fileUpload():
    global uploadFile
    uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º –≤ –≤–∏–¥–µ ;", type=['.csv'],accept_multiple_files=False)
    if uploaded_file is not None:
        st.write("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! üòé")

    return uploaded_file
def analysis(file):
    if file.type =='text/csv':
        df = pd.read_csv(file.name, names=['Date', 'MS'], delimiter=';',encoding='utf-8')
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df.index = pd.to_datetime(df['Date'])
        for i in range(df.shape[0]):
            df['Date'][i] = datetime.datetime.strptime(df["Date"][i], '%Y-%m')
        # df['Date'] = pd.to_datetime(df['Date'])
        # df = df.set_index('Date')
        # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
        df = df.resample('MS').sum()
        return df


@st.cache_resource
def forecast(df):
    # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    model = SARIMAX(df, order=(2, 0, 1), seasonal_order=(2, 1, 2, 12), trend='t')
    results = model.fit()
    forecast = results.predict(start=72, end=83, dynamic=True)
    forecast = pd.to_numeric(round(forecast), downcast='integer')
    forecast = forecast.rename("Volume")
    return forecast

@st.cache_data
def forecastFuel(df, forecast):
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ä–∞—Å—Ö–æ–¥–∞  —Ç–æ–ø–ª–∏–≤–∞
    fig = plt.figure(figsize=(12, 6))
    plt.plot(df.index[37::], df[37::], label='–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', color='b', scalex=120)
    plt.plot(forecast.index, forecast, label='–ü—Ä–æ–≥–Ω–æ–∑', color='C1')
    #plt.plot(forecast.index, forecast, 'ro', color='grey')
    plt.plot(forecast.index, forecast.apply(lambda x: x * 1.15), 'r--', color='black')
    plt.plot(forecast.index, forecast.apply(lambda x: x * 0.85), 'r--', color='black')
    plt.legend(loc='upper left')
    plt.xlabel('–î–∞—Ç–∞')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø–ª–∏–≤–∞')
    plt.title('–ü—Ä–æ–≥–Ω–æ–∑ —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥')
    st.pyplot(fig)
    st.title('**–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ä–∞—Å—Ö–æ–¥–∞ –ø–æ –º–µ—Å—è—Ü–∞–º**')
    forecast = pd.to_numeric(round(forecast), downcast='integer')
    forecast = forecast.rename("Volume")
    st.table(forecast)
    return forecast


def forecastDate(forecast):
    st.title('–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –∑–∞–≤–æ–∑–∞ —Ç–æ–ø–ª–∏–≤–∞')
    fuel_tank = st.number_input('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–±—ä–µ–º—É —Ç–æ–ø–ª–∏–≤–Ω—ã—Ö —Ü–∏—Å—Ç–µ—Ä–Ω', step=250, value=5000, format='%i',min_value=2500)
    #st.error('This is an error', icon="üö®")
    st.write("–í—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", fuel_tank)
    forecast = pd.to_numeric(round(forecast), downcast='integer')
    # pred_date = [datetime.date(2023, 1, 1) + DateOffset(day=x) for x in range(0, 12)]
    # st.write(pred_date)
    # pred_date = pd.DataFrame(index=pred_date[1:], columns=['Volume'])
    # st.write(pred_date)
    date = []
    data = []
    for index, value in forecast.items():
        pred = value / fuel_tank
        if pred <= 1:
            data.append(value)
            date.append(index + DateOffset(day=0))
        elif pred >= 1:
            pred_date = [index + DateOffset(day=x) for x in range(0, 31, floor(30 / int(pred)))]
            if len(pred_date) != ceil(pred):
                del pred_date[-(len(pred_date)-ceil(pred)):]
            for i in range(int(pred)):
                data.append(fuel_tank)
                value -= fuel_tank
            data.append(value)
            date.append(pred_date)
        else:
            st.write("–û—à–∏–±–∫–∞")


    res = []
    for elem in date:
        if  not isinstance(elem, collections.abc.Iterable):
            res.append(elem)
            continue
        for i in range(len(elem)):
            res.append(elem[i])



    prognoz = pd.Series(index=res, data=data, name='Volume')
    pr = pd.DataFrame(data=data, columns=['Volume'])
    pr["Date"] = res

    st.title("**–°–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–≤–æ–∑–∞ —Ç–æ–ø–ª–∏–≤–∞ –ø–æ –¥–∞—Ç–µ**")
    view_df = st.checkbox("–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
    if view_df:

        filter_box = st.checkbox('–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã')
        if filter_box:
            st.write('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –¥–ª—è –æ—Ç–±–æ—Ä–∞')
            start_slider = st.slider(
                "–ù–∞—á–∞–ª–æ",
                value=datetime.datetime(2023, 1, 1),
                min_value=datetime.datetime(2023, 1, 1),
                max_value=datetime.datetime(2024, 1,1),
                step=pd.Timedelta("1 days"),
                format="MM/DD/YY    ")
            end_slider = st.slider(
                "–ö–æ–Ω–µ—Ü",
                value=datetime.datetime(2023, 7, 5),
                min_value=datetime.datetime(2023, 1, 1),
                max_value=datetime.datetime(2024, 1, 1),
                step=pd.Timedelta("1 days"),
                format="MM/DD/YY")
            dataSlider = pr[(pr["Date"] >= start_slider) & (pr["Date"] <= end_slider)]
            st.table(dataSlider[['Date','Volume']])
        else:
         # if st.button('Test'):
            st.table(pr[['Date', 'Volume']])

    chart = st.checkbox("–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏")
    if chart:
        fig = plt.figure(figsize=(12, 6))
        plt.plot(forecast.index, forecast, label='–ü—Ä–æ–≥–Ω–æ–∑', color='C0')
       # plt.plot(prognoz.index, prognoz,'ro--', color='grey')
       #  plt.hist(prognoz, color='blue', edgecolor='black',)
        plt.plot(forecast.index, forecast.apply(lambda x: x * 1.1), 'r--',label="–í–µ—Ä—Ö–Ω–∏–π –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª", color='C1')
        plt.plot(forecast.index, forecast.apply(lambda x: x * 0.9), 'r--',label="–ù–∏–∂–Ω–∏–π –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª", color='C2')
        plt.plot(forecast.index, forecast, 'ro', color='C0')
        plt.legend(loc='upper left')
        plt.xlabel('–î–∞—Ç–∞')
        plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø–ª–∏–≤–∞')
        plt.title('–ü—Ä–æ–≥–Ω–æ–∑ —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥')
        st.pyplot(fig)
        st.title("**–î–∞—Ç—ã –∑–∞–≤–æ–∑–∞ —Ç–æ–ø–ª–∏–≤–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–º –≤–∏–¥–µ**")
        plt.figure(figsize=(12, 5), dpi=120)
        calmap.calendarplot(prognoz, fig_kws={'figsize': (8, 8)},
                            yearlabel_kws={'color': 'black', 'fontsize': 14},
                            subplot_kws={'title': '–ü—Ä–æ–≥–Ω–æ–∑ –¥–∞—Ç –∑–∞–≤–æ–∑–∞'})

        plt.savefig('foo.png', bbox_inches='tight')
        st.image('foo.png')

def main():
    global uploadFile
    page = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É",
        [
            "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
            "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞",
            "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–≤–æ–∞–Ω–∏–µ –¥–∞—Ç—ã –∑–∞–≤–æ–∑–∞ —Ç–æ–ø–ª–∏–≤–∞",
        ]
    )
    # First Page
    if page == "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞":
        pass
        # uploadFile = fileUpload()
        # if uploadFile is not None:
        #     st.write(uploadFile)
    # Second Page
    elif page == "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞":
        forecastFuel(analysis(uploadFile), forecast(analysis(uploadFile)))
    # Third Page
    elif page == "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–≤–æ–∞–Ω–∏–µ –¥–∞—Ç—ã –∑–∞–≤–æ–∑–∞ —Ç–æ–ø–ª–∏–≤–∞":
        forecastDate(forecast(analysis(uploadFile)))
    # Four Page


uploadFile = fileUpload()
if __name__ == '__main__':

    main()

